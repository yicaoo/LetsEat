LetsEat, iOS Mobile Application

Language: Swift

Project Outline
This application starts with an introduction of all its feature, shown once to new user.
Inside the application, there are three features: dine out, cook and exercise.
[Dine out] Select food category to search nearby restaurants. Get driving directions or check out the food images. Call restaurants or save phone to contact list.
[Cook] Create cooking albums. Take images or load images from library with machine learning image recognition feature. Edit photo info while listening to music. Email or text photos with descriptions.
[Exercise] Check out number of steps and walking distance recorded from HealthKit. Enter caffine and protein consumption. Plan exercise with location based reminder or start exercise with timer.


APIs Used:
-MapKit: [DineOut]search location near user, custom annotations, launch navigation
         [Exercise]overlay direction on map
-Table View: [DineOut]Table view with custom cells with images, variable height;
             [Exercise] Table view with static cells, section header, used as form 
-UIPageControl&UIPageViewController: when app is launched for the first time, walk through new user with app features
-Animation API: animation on key drop and menu page pulsating effect
-UISearchController: search by name and filter food by category in the dine out table view(dynamically update)
-WebKit: ability to go back and forward, progress bar indicating page loading
-UIApplication: phone call, go to App Store, go to wifi setting if no internet connection, instagram URL
-ContactsKit: add contact and fetch contact(check for duplicates)
-UIEvent: shake phone
-UIGestureRecognizer: tap to dismiss, pinch gesture
-Popover API: adjustable size in both dine out add contact and exercise timer
-Modal Segue: edit image info in cook section and select location from map for reminder in exercise
-Document API: save cook albums
-UICollectionView: careful layout to fit image nicely, spacing control between cells, adjustable cell width, custom cell with text view and buttons
-Drag and Drop: drag and drop collection view cell to reorder
-ImagePickerAPI: load image from library or take pic with camera
-Core Image: process image to pixel buffer for ML
-Core Machine Learning: use core ML to predict image, customize results from ML model to present to user
-UIActivityController: share on instagram and customize activities
-Notifications: used for keyboard, dismiss blur view when dismiss popover, sync textview settings with view, save image description (note delegation was used to pass search location from the exercise section modal map to the table instead of notification to add variety) 
-AVFoundation: for music playing: next song, previous song, fast forward, rewind, volume control, play-pause button switching, song name display
-Core Animation: CABasic animation to animate the song title wrapping around
-CALayer: text layer for song title, text layer for health kit data drawn on UIImage
-MessageUI: send email and text messages with image and text and error handling
-SettingsAPI: custom app settings to choose textview background color and changes made in settings are reflected immediately in app
-PersistenceAPI: File manager, User defaults for whether first time app launch, for textview background preference
-HealthKit: Read and write data from HealthKit of various data types
-Date API: form date component and predicate 
-EventKit: add reminder and event, location and time based alarm
-UIDatePicker: both picking date for event table and for HealthKit data
-VisualEffect: blur the rest of the view when pop over, added vibrancy and custom alpha. Also blurring effect with button layered onto on the last page during app first launch
-Timer: my popover timer
-Storyboard design: navigation is controller is used extensively
-Controls API: Slider, label, button(custom image), segment control, text view are all used in user friendly fashion (disable button appropriately i.e. in timer, no cover up textfield/view with keyboard, tap out to dismiss etc.)
-Alert: Used extensively everywhere in app 

UIDesign: 
Very user friendly with extensively use of alerts and takes care of situations where the user has no wifi access or no photo sharing app installed.
Looks good on iPhone/ipod devices in all orientations, custom buttons, background etc.



